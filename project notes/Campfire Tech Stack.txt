Campfire Tech Stack - Current Expectations

-----------------------------------------------------

**Frontend (Android)**
*   Language: KotlinUI Framework: Jetpack Compose
*   Architecture: MVVM (ViewModel, LiveData/StateFlow)
*   Networking: Retrofit (with OkHttp, JSON converter)
*   Asynchronous Operations: Kotlin Coroutines & Flow
*   Local Database: Room
*   Dependency Injection: Hilt
*   Navigation: Jetpack Navigation Compose
*   Authentication Handling: Secure OAuth2 token management
*   Location Services: Android Location APIs
*   Push Notifications: Firebase Cloud Messaging
*   Payment Integration: Stripe or Google Pay API (TBD)

---

**Backend**
*   Language: Python (3.10+)
*   Framework: FastAPI
*   Database: PostgreSQL
*   ORM/Database Toolkit: SQLAlchemy
*   Database Migrations: Alembic
*   Authentication:
    *   OAuth2 (custom OTP-based flow)
    *   Tokens: JSON Web Tokens (JWT)
*   Asynchronous Task Queues (Future): Celery (with Redis/RabbitMQ)
*   Real-time Communication (Future): FastAPI WebSockets
*   Geolocation Services (Future):
    *   Database Extension: PostGIS for PostgreSQL
*   Payment Gateway Integration (Future): Stripe API
*   Containerization: Docker (Docker Compose for local dev)
*   Testing: Pytest
*   Initial Deployment: Docker-based
*   Scalability/Deployment (Future): Kubernetes, AWS Elastic Beanstalk
*   Monitoring (Future): Logging (initially), Prometheus/Grafana, Cloud-native solutions

---

**Infrastructure**
*   Cloud Provider: AWS or GCP (To be finalized)
*   Version Control: Git
*   Storage (User Content): Amazon S3 or Google Cloud Storage
*   Database Hosting (PostgreSQL): Amazon RDS, Google Cloud SQL
*   CI/CD: GitHub Actions, GitLab CI/CD
*   Caching (Future): Redis or Memcached
*   Logging (Future): Centralized (ELK, CloudWatch Logs, Google Cloud Logging)